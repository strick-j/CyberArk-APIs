meta {
  name: Get Target Platforms
  type: http
  seq: 1
}

get {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/platforms/targets
  body: none
  auth: none
}

assert {
  res.status: eq 200
}

script:pre-request {
  // Perform authentication usings platformToken.js tools
  const platformTokenAuth = require('./tools/platformTokenAuth');
  await platformTokenAuth.login();
}

docs {
  ## Get Target platforms
  This method allows users to retrieve basic information of all existing target platforms.
  
  You can use filters to retrieve a subset of the target platforms or search for a specific target platform. For details, see URL parameters.
  
  ### Request URL
  https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/platforms/targets
  > **URL NOTES**
  > - Make sure there are no spaces in the URL.
  > - The following characters are not supported in URL values: + & 
  > - If the URL includes a dot (.), add a forward slash (/) at the end of the URL. For example: api/Safes/MySafe/Members/user@cyber.com/
  
  #### Request Resource Information
  | HTTP Method | Content Type |
  | :-- | :-- |
  | GET | application/json |
  
  #### Request Query Parameters
  | Parameter | Type | Required | Description |
  | :-- | :-- | :-- | :-- |
  | filters | string | no | Filter according to REST standard. You can use the filter values in the table below. **Note:** To use more than one filter, you can use the AND operator. For example: https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=active eq True AND systemType eq Databases |
  | search | string | no | Search for a string in the following field: Platform Name |
  
  #### Request Filters
  | Filter | Valid Values | Example |
  | :-- | :-- | :-- |
  | active | true, false | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=active eq True | 
  | systemType | string | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=systemType eq Databases |
  | periodicVerify | true, false | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=periodicVerify eq True |
  | manualVerify | true, false | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=manualVerify eq True |
  | periodicChange | true, false | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=periodicChange eq True |
  | manualChange | true, false | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=manualChange eq True |
  | automaticReconcile | true, false | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=automaticReconcile eq True |
  | manualReconcile | true, false | https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Platforms/Targets?Filter=manualReconcile eq True |
  
  ### Example Request Body
  None
  
  #### Example Response
  ```
  {
      "Platforms": [
      {
          "ID": 10,
          "PlatformID": "WinDesktopLocal",
          "Name": "Windows Desktop Local Accounts",
          "Active": true,
          "SystemType": "Windows",
          "AllowedSafes": ".*",
          "PrivilegedAccessWorkflows": {
          "RequireDualControlPasswordAccessApproval": {
              "IsActive": false,
              "IsAnException": false
          },
          "EnforceCheckinCheckoutExclusiveAccess": {
              "IsActive": false,
              "IsAnException": false
          },
          "EnforceOnetimePasswordAccess": {
              "IsActive": false,
              "IsAnException": false
          },
          "RequireUsersToSpecifyReasonForAccess": {
              "IsActive": true,
              "IsAnException": false
          }
          },
          "CredentialsManagementPolicy": {
              "Verification": {
                  "PerformAutomatic": false,
                  "RequirePasswordEveryXDays": 7,
                  "AutoOnAdd": false,
                  "IsRequirePasswordEveryXDaysAnException": false,
                  "AllowManual": true
              },
              "Change": {
                  "PerformAutomatic": false,
                  "RequirePasswordEveryXDays": 90,
                  "AutoOnAdd": false,
                  "IsRequirePasswordEveryXDaysAnException": false,
                  "AllowManual": true
              },
              "Reconcile": {
                  "AutomaticReconcileWhenUnsynced": false,
                  "AllowManual": true
              },
              "SecretUpdateConfiguration": {
                  "ChangePasswordInResetMode": false
              }
          },
          "PrivilegedSessionManagement": {
              "PSMServerId": ""
          }
      }
      ],
  "Total": 1
  }
  ```
  
  ### Response Codes
  | Return Code | Code Number | Description |
  | --- | --- | :-- |
  | Success | 200 | The request succeeded. The actual response will depend on the request method used. |
  | Created | 201 | The request was fulfilled and resulted in a new resource being created. |
  | Accepted | 202 | The request has been accepted for processing. |
  | No Content | 204 | The server successfully processed the request and is not returning any content (no response body). This code is typically returned by DELETE requests. |
  | Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |
  | Unauthorized | 401 | The request requires user authentication. |
  | Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |
  | Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |
  | Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |
  | Too Many Requests | 429 | The user has sent too many requests in a given amount of time ("rate limiting"). |
  | Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |
  | Not Implemented | 501 | The server does not support this operation due to version incompatibility. |
}
