meta {
  name: Create Multiple Access Requests
  type: http
  seq: 1
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/MyRequests
  body: json
  auth: none
}

body:json {
  {
    "BulkItems": [
      {
        "Operation": "Add",
        "Item": {
          "accountID": "{{accountId1}}",
          "reason": "MyReason",
          "multipleAccessRequired": false,
          "fromDate": 0,
          "toDate": 0,
          "AdditionalInfo": ""
        }
      },
      {  
        "Operation": "Add",
        "Item": {
          "accountID": "{{accountId2}}",
          "reason": "MyReason",
          "multipleAccessRequired": false,
          "fromDate": 0,
          "toDate": 0,
          "AdditionalInfo": ""
        }
      }
    ]
  }
}

vars:pre-request {
  accountId: 
}

assert {
  res.status: eq 201
  res.body: isJson
  res.body.RequestID: isString
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets Account Id for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('accountId1', bru.getEnvVar('testPrivilegeCloudAccountIdReq1'));
    bru.setVar('accountId2', bru.getEnvVar('testPrivilegeCloudAccountIdReq2'));
    tools.log('Account Id 1: ' + bru.getVar('accountId1'))
    tools.log('Account Id 2: ' + bru.getVar('accountId2'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 201) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
  
}

docs {
  ## Create access request for multiple accounts
  This method allows a developer to request access to multiple accounts. The response contains the ID of the bulk action that was performed.
  
  > **NOTE**
  > - This option is available only if you have **Add accounts**, **Update account content**, and **Update account properties** authorization in at least one Safe.
  
  > ***IMPORTANT***
  > - When requesting access to 1000 accounts or more, you may experience performance issues.
  
  ### Request URL
  https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/MyRequests
  
  > **URL NOTES**
  > - Make sure there are no spaces in the URL.
  > - The following characters are not supported in URL values: + & 
  > - If the URL includes a dot (.), add a forward slash (/) at the end of the URL. For example: api/Safes/MySafe/Members/user@cyber.com/
  
  #### Request Resource Information
  | HTTP Method | Content Type |
  | :-- | :-- |
  | POST | application/json |
  
  #### Request Query Parameters
  None
  
  ### Example Request Body (List of Requests)
  ```
  {
    "BulkItems": [
      {
        "Operation": "Add",
        "Item": {
          "accountID": "23_3",
          "reason": "MyReason",
          "TicketingSystemName": "ServiceNow",
          "multipleAccessRequired": false,
          "fromDate": 0,
          "toDate": 0,
          "AdditionalInfo": {
            "Emergency": false,
            "RefNo": ""
          }
        }
      },
      {
        "Operation": "Add",
        "Item": {
          "accountID": "23_6",
          "reason": "nosafe",
          "TicketingSystemName": "",
          "multipleAccessRequired": false,
          "fromDate": 0,
          "toDate": 0,
          "AdditionalInfo": {
            "Emergency": false,
            "RefNo": ""
          }
        }
      }
    ]
  }
  ```
  
  ### Example Request Body (Filtered Requests)
  ```
  {
    "BulkFilter": {
      "CommonEntityProperties": {
        "Operation": "Add",
        "Item": {
          "reason": "MyReason",
          "TicketingSystemName": "ServiceNow",
          "multipleAccessRequired": false,
          "fromDate": 0,
          "toDate": 0,
          "AdditionalInfo": {
            "Emergency": false,
            "RefNo": ""
          }
        }
      },
      "ExcludedEntities": [ "28_102", "28_103"],
      "FilterParams": {
          "SearchParam": {
              "Search": "MyCustomSafeName"
          }
      }
    }
  }
  ```
  
  #### Example Response (201 Created)
  ```
  {
    "id":""
  }
  ```
  
  #### Example Response (403 Forbidden)
  ```
  {
    "ErrorCode": "PASWS041E",
    "ErrorMessage": "You are not authorized to perform this action."
  }
  ```
  
  #### Example Resposne (404 Method Not Allowed)
  ```
  {
    "Message": "The requested resource does not support http method 'POST'."
  }
  ```
  
  #### Example Response (500 Bad Request)
  ```
  {
    "ErrorCode": "CAWS00001E",
    "ErrorMessage": "Multiple access, timeframe and their configuration are conflicting."
  }
  ```
  
  #### Response Codes
  | Return Code | Code Number | Description |
  | --- | --- | :-- |
  | Success | 200 | The request succeeded. The actual response will depend on the request method used. |
  | Created | 201 | The request was fulfilled and resulted in a new resource being created. |
  | Accepted | 202 | The request has been accepted for processing. |
  | No Content | 204 | The server successfully processed the request and is not returning any content (no response body). This code is typically returned by DELETE requests. |
  | Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |
  | Unauthorized | 401 | The request requires user authentication. |
  | Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |
  | Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |
  | Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |
  | Too Many Requests | 429 | The user has sent too many requests in a given amount of time ("rate limiting"). |
  | Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |
  | Not Implemented | 501 | The server does not support this operation due to version incompatibility. |
}
