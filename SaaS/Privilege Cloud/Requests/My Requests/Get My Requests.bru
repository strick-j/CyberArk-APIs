meta {
  name: Get My Requests
  type: http
  seq: 2
}

get {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/myrequests?onlyWaiting=false&expired=false
  body: none
  auth: none
}

query {
  onlyWaiting: false
  expired: false
}

assert {
  res.status: eq 200
  res.body: isJson
  res.body.Total: isNumber
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 201) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
  
  // Test settings
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    // Save Request Id in Session Collection
    if (res.body.MyRequests[0].RequestID) {
      bru.setVar('pasRequestId', res.body.MyRequests[0].RequestID);
      tools.log('Request Id: ' + bru.getVar('pasRequestId'))
    }
  }
}

docs {
  ## Get my Requests
  This method returns a list of the end user's requests.
  
  ### Request URL
  https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/MyRequests
  
  > **URL NOTES**
  > - Make sure there are no spaces in the URL.
  > - The following characters are not supported in URL values: + & 
  > - If the URL includes a dot (.), add a forward slash (/) at the end of the URL. For example: api/Safes/MySafe/Members/user@cyber.com/
  
  #### Request Resource Information
  | HTTP Method | Content Type |
  | :-- | :-- |
  | GET | application/json |
  
  #### Request Query Parameters
  | Parameter | Type | Required | Description |
  | :-- | :-- | :-- | :-- |
  | onlyWaiting | boolean | yes | Only requests waiting for approval will be listed |
  | Expired | boolean | yes | Expired requests will be included in the list. |
  
  #### Request Body
  None
  
  ### Response
  
  #### Example Response (200 OK)
  ```
  {
    "MyRequests": [
      {
        "RequestID": "BRU-API-TEST-SAFE-ACCESS",
        "SafeName": "BRU-API-TEST-SAFE-ACCESS",
        "RequestorUserName": "example@cyberark.cloud.1234",
        "RequestorReason": "Access requested via CyberArk Web Services",
        "UserReason": "Access requested via CyberArk Web Services",
        "CreationDate": 1712881638,
        "Operation": "Retrieve password BRU-API-TEST-PLATFORM-REQ-bru.user-example.local",
        "ExpirationDate": 1715473638,
        "OperationType": 4,
        "AccessType": "OneTime",
        "ConfirmationsLeft": 1,
        "AccessFrom": 0,
        "AccessTo": 0,
        "Status": 1,
        "StatusTitle": "Waiting: 1 more user(s) must confirm the request",
        "InvalidRequestReason": 0,
        "CurrentConfirmationLevel": 1,
        "RequiredConfirmersCountLevel2": 1,
        "TicketingSystemProperties": {
          "Name": "ServiceNow",
          "Number": null,
          "Status": null
        },
        "AdditionalInfo": {},
        "AccountDetails": {
          "AccountID": "100_1",
          "Properties": {
            "Address": "example.local",
            "Safe": "BRU-API-TEST-SAFE-ACCESS",
            "Folder": "Root",
            "Name": "Operating System-BRU-API-TEST-PLATFORM-REQ-example.local-bru.user",
            "PolicyID": "BRU-API-TEST-PLATFORM-REQ",
            "PlatformName": "BRU-API-TEST-PLATFORM-REQ",
            "DeviceType": "Operating System",
            "LastVerifiedDate": "1712778534000",
            "LastModifiedDate": "1712777622000",
            "LastModifiedBy": "N/A",
            "LastUsedDate": "1712778477000",
            "LastUsedBy": "N/A",
            "Tags": "AWS; BRUNO",
            "UserName": "bru.user",
            "Location": "AWS",
            "LogonDomain": "EXAMPLE",
            "OwnerName": "Bruno API Testing",
            "LockedBy": "",
            "CPMDisabled": "",
            "CPMStatus": "success",
            "ManagedByCPM": "True",
            "DeletedBy": "",
            "DeletionDate": "0",
            "ImmediateCPMTask": "NoTask",
            "LastCPMTask": "VerifyTask",
            "CreationDate": "1712777622",
            "IsSSHKey": "False",
            "IsIrregularPlatform": "False",
            "RetriesCount": "-1",
            "CreationMethod": "PVWA",
            "LastSuccessVerification": "1712778534",
            "LastTask": "VerifyTask"
          }
        },
        "Confirmers": []
      }
    ],
    "Total": 1
  }
  ```
  
  #### Response Codes
  | Return Code | Code Number | Description |
  | --- | --- | :-- |
  | Success | 200 | The request succeeded. The actual response will depend on the request method used. |
  | Created | 201 | The request was fulfilled and resulted in a new resource being created. |
  | Accepted | 202 | The request has been accepted for processing. |
  | No Content | 204 | The server successfully processed the request and is not returning any content (no response body). This code is typically returned by DELETE requests. |
  | Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |
  | Unauthorized | 401 | The request requires user authentication. |
  | Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |
  | Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |
  | Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |
  | Too Many Requests | 429 | The user has sent too many requests in a given amount of time ("rate limiting"). |
  | Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |
  | Not Implemented | 501 | The server does not support this operation due to version incompatibility. |
}
