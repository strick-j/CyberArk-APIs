meta {
  name: Delete an MFA Caching Key for Another User
  type: http
  seq: 4
}

delete {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/users/{{pasUserId}}/secret/sshkeys/cache
  body: none
  auth: none
}

vars:pre-request {
  pasUserId: 123
}

assert {
  res.status: eq 204
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets pasSafeMemberName for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('pasUserId', bru.getEnvVar('testPrivilegeCloudUserId'));
    tools.log('User Id: ' + bru.getVar('pasUserId'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  if (res.status != 204) {
    tools.log('Error Code: ' + res.body.ErrorCode);
    tools.log('Error Message: ' + res.body.ErrorMessage);
  }
}

docs {
  ## Delete an MFA caching SSH key for another user
  This method can be triggered by a strong user to delete all MFA caching SSH keys used to connect to targets via PSM for SSH.
  
  The user who runs this method requires the following permission in the Vault:
  - Reset Users' Passwords
  
  In addition, the user who runs this web service must be in the same Vault Location or higher as the user whose public SSH keys are retrieved.
  
  ### Request URL
  https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Users/{userID}/Secret/SSHKeys/Cache/
  
  #### Request Resource Information
  | HTTP Method | Content Type |
  | :-- | :-- |
  | DELETE | application/json |
  
  #### Request Parameters
  | Parameter | Type | Required | Description |
  | :-- | :-- | :-- | :-- |
  | userid | string | no | The name of the user whose MFA caching SSH key will be generated. This username is not case-sensitive. Specify the name of any user in the Vault. |
  
  ### Example Request Body
  None
  
  #### Example Response
  ```
  ```
  
  ### Response Codes
  | Return Code | Code Number | Description |
  | --- | --- | :-- |
  | Success | 200 | The request succeeded. The actual response will depend on the request method used. |
  | Created | 201 | The request was fulfilled and resulted in a new resource being created. |
  | Accepted | 202 | The request has been accepted for processing. |
  | No Content | 204 | The server successfully processed the request and is not returning any content (no response body). This code is typically returned by DELETE requests. |
  | Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |
  | Unauthorized | 401 | The request requires user authentication. |
  | Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |
  | Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |
  | Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |
  | Too Many Requests | 429 | The user has sent too many requests in a given amount of time ("rate limiting"). |
  | Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |
  | Not Implemented | 501 | The server does not support this operation due to version incompatibility. |
}
