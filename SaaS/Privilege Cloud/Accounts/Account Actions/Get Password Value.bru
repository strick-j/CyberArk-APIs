meta {
  name: Get Password Value
  type: http
  seq: 1
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/accounts/{{accountId}}/secret/retrieve/
  body: none
  auth: none
}

vars:pre-request {
  accountId: 100_1
}

assert {
  res.status: eq 200
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets Account ID for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('accountId', bru.getEnvVar('testPrivilegeCloudMgmtId'));
    tools.log('Account Id: ' + bru.getVar('accountId'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  if (res.status != 200) {
    tools.log('Error Code: ' + res.body.ErrorCode);
    tools.log('Error Message: ' + res.body.ErrorMessage);
  }
}

docs {
  ## Get password value
  This method enables users to retrieve the password or SSH key of an existing account that is identified by its Account ID. It enables users to specify a reason and ticket ID, if required.
  
  > ***NOTE***
  > - To retrieve a private SSH key account, see the Retrieve private SSH key account REST API.
  
  The ability to retrieve credentials using this REST API is intended for human use only and is not recommended for applications or automated processes, where application-based authentication is required. For application or automated processes use cases, see the Secrets Manager Credential Providers Docs.
  
  ### Request URL
  https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Accounts/{accountId}/Password/Retrieve/
  
  > **URL NOTES**
  > - Make sure there are no spaces in the URL.
  > - The following characters are not supported in URL values: + & 
  > - If the URL includes a dot (.), add a forward slash (/) at the end of the URL. For example: api/Safes/MySafe/Members/user@cyber.com/
  
  #### Request Resource Information
  | HTTP Method | Content Type |
  | :-- | :-- |
  | POST | application/json |
  
  #### Request Query Parameters
  | Parameter | Type | Required | Description |
  | :-- | :-- | :-- | :-- |
  | accountId | string | yes | The unique ID of the account.|
  
  ### Example Request Body
  None
  
  #### Example Response
  string with password
  
  ### Response Codes
  | Return Code | Code Number | Description |
  | --- | --- | :-- |
  | Success | 200 | The request succeeded. The actual response will depend on the request method used. |
  | Created | 201 | The request was fulfilled and resulted in a new resource being created. |
  | Accepted | 202 | The request has been accepted for processing. |
  | No Content | 204 | The server successfully processed the request and is not returning any content (no response body). This code is typically returned by DELETE requests. |
  | Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |
  | Unauthorized | 401 | The request requires user authentication. |
  | Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |
  | Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |
  | Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |
  | Too Many Requests | 429 | The user has sent too many requests in a given amount of time ("rate limiting"). |
  | Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |
  | Not Implemented | 501 | The server does not support this operation due to version incompatibility. |
}
