meta {
  name: Add Safe
  type: http
  seq: 5
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/safes
  body: json
  auth: none
}

body:json {
  {
      "SafeName": "{{safeName}}",
      "Description": "Initial Description",
      "OLACEnabled": false,
      "ManagingCPM": "{{cpmName}}",
      "NumberOfVersionsRetention": null,
      "NumberOfDaysRetention": 0,
      "AutoPurgeEnabled": false,
      "Location": "{{folder}}"
  }
}

vars:pre-request {
  safeName: example-safe
  folder: 
  cpmName: example
}

assert {
  res.status: eq 201
  res.body: isJson
  res.body.safeNumber: isNumber
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets safeUrlId and cpmName for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('safeName', bru.getEnvVar('testSafeNameAction'));
    bru.setVar('cpmName', bru.getEnvVar('testCpmName'));
    tools.log('Safe Name: ' + bru.getVar('safeName'))
    tools.log('CPM Name: ' + bru.getVar('cpmName'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 201) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
  
  // Test settings
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    // Save safeNumber in Session Collection
    if (res.body.safeNumber) {
      bru.setVar('pasSafeNumber', res.body.safeNumber);
    }
    // Save safeUrlId in Session Collection
    if (res.body.safeUrlId) {
      bru.setVar('pasSafeUrlId', res.body.safeUrlId);
    }
  }
}

docs {
  ## Add Safe
  This method adds a new Safe to Privilege Cloud.
  
  The user who runs this web service must have Add Safes permissions in Privilege Cloud.
  
  ### Request URL
  https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Safes/
  
  > **URL NOTES**
  > - Make sure there are no spaces in the URL.
  > - The following characters are not supported in URL values: + & 
  > - If the URL includes a dot (.), add a forward slash (/) at the end of the URL. For example: api/Safes/MySafe/Members/user@cyber.com/
  
  #### Request Resource Information
  | HTTP Method | Content Type |
  | :-- | :-- |
  | POST | application/json |
  
  #### Request Query Parameters
  None
  
  ### Example Request Body
  ```
  {
    "numberOfDaysRetention": 7,
    "numberOfVersionsRetention": null,
    "oLACEnabled": true,
    "autoPurgeEnabled": true,
    "managingCPM": "passwordManager",
    "safeName": "PasswordManagerSafe",
    "description": "This is PasswordManager safe.",
    "location": ""
  }
  ```
  
  #### Example Response (201 Created)
  ```
  {
    "safeUrlId": "BRU-API-TEST-SAFE-ACTION",
    "safeName": "BRU-API-TEST-SAFE-ACTION",
    "safeNumber": 269,
    "description": "Initial Description",
    "location": "\\",
    "creator": {
      "id": "3638b514-1234-1234-1234-15b1767b8702",
      "name": "example@cyberark.cloud.1234"
    },
    "olacEnabled": false,
    "managingCPM": "CONNECTOR",
    "numberOfVersionsRetention": null,
    "numberOfDaysRetention": 0,
    "autoPurgeEnabled": false,
    "creationTime": 1730381622,
    "lastModificationTime": 1730381623722814
  }
  ```
  
  ### Response Codes
  | Return Code | Code Number | Description |
  | --- | --- | :-- |
  | Success | 200 | The request succeeded. The actual response will depend on the request method used. |
  | Created | 201 | The request was fulfilled and resulted in a new resource being created. |
  | Accepted | 202 | The request has been accepted for processing. |
  | No Content | 204 | The server successfully processed the request and is not returning any content (no response body). This code is typically returned by DELETE requests. |
  | Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |
  | Unauthorized | 401 | The request requires user authentication. |
  | Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |
  | Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |
  | Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |
  | Too Many Requests | 429 | The user has sent too many requests in a given amount of time ("rate limiting"). |
  | Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |
  | Not Implemented | 501 | The server does not support this operation due to version incompatibility. |
}
