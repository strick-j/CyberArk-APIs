meta {
  name: Add Safe Member
  type: http
  seq: 3
}

post {
  url: https://{{identityTenantName}}.privilegecloud.cyberark.cloud/passwordvault/api/safes/{{safeUrlId}}/members
  body: json
  auth: none
}

body:json {
  {
    "memberName":"{{safeMemberName}}",
    "searchIn": "Vault",
    "membershipExpirationDate":1667472534, // Unix Time Stamp
    "permissions": {
      "useAccounts":false,
      "retrieveAccounts": false,
      "listAccounts": false,
      "addAccounts": false,
      "updateAccountContent": false,
      "updateAccountProperties": false,
      "initiateCPMAccountManagementOperations": false,
      "specifyNextAccountContent": false,
      "renameAccounts": false,
      "deleteAccounts": false,
      "unlockAccounts": false,
      "manageSafe": false,
      "manageSafeMembers": false,
      "backupSafe": false,
      "viewAuditLog": false,
      "viewSafeMembers": false,
      "accessWithoutConfirmation": false,
      "createFolders": false,
      "deleteFolders": false,
      "moveAccountsAndFolders": false,
      "requestsAuthorizationLevel1": false,
      "requestsAuthorizationLevel2": false
      },
    "MemberType": "{{safeMemberType}}" // <user|group|role>
  }
}

vars:pre-request {
  safeUrlId: example-safe
  safeMemberType: user
  safeMemberName: example@example.com
}

assert {
  res.status: eq 201
}

script:pre-request {
  const platformTokenAuth = require('./tools/platformTokenAuth');
  const tools = require('./tools/tools');
  
  // Perform authentication usings platformToken.js tools
  await platformTokenAuth.login();
  
  // Sets safeMemberName and safeUrlId for testing based on environment flag and variables
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    tools.log('Setting Variables');
    bru.setVar('safeMemberName', bru.getEnvVar('testPrivilegeCloudUserName'));
    bru.setVar('safeUrlId', bru.getEnvVar('testSafeName'));
    tools.log('MemberName: ' + bru.getVar('safeMemberName'))
    tools.log('SafeName: ' + bru.getVar('safeUrlId'))
  }
}

script:post-response {
  // Log on error
  const tools = require('./tools/tools');
  
  // Log on error
  if (res.status != 200) {
    if (res.body.Message) {
      tools.log('Message: ' + res.body.Message);
    }
    if (res.body.ErrorCode) {
      tools.log('Error Code: ' + res.body.ErrorCode);
    }
    if (res.body.ErrorMessage) {
      tools.log('Error Message: ' + res.body.ErrorMessage);
    }
    if (res.body.Details) {
      tools.log('Details Error Code: ' + res.body.Details[0].ErrorCode);
      tools.log('Details Error Message: ' + res.body.Details[0].ErrorMessage);
      tools.log('Details Parameter Name: ' + res.body.Details[0].ParameterName);
    }
  }
  
  // Test settings
  var flag = bru.getEnvVar('testFlag')
  if (flag == 'true') {
    // Save memberId in Session Collection
    if (res.body.memberId) {
      bru.setVar('pasSafeMemberId', res.body.memberId);
    }
  }
}

docs {
  ## Add Safe Member
  This method adds an existing user or group as a Safe member.
  
  The user who runs this web service must have **Manage Safe Members** permissions in Privilege Cloud.
  
  ### Request URL
  https://<subdomain>.privilegecloud.cyberark.cloud/PasswordVault/API/Safes/{SafeUrlId}/Members/
  
  > **URL NOTES**
  > - Make sure there are no spaces in the URL.
  > - The following characters are not supported in URL values: + & 
  > - If the URL includes a dot (.), add a forward slash (/) at the end of the URL. For example: api/Safes/MySafe/Members/user@cyber.com/
  
  #### Request Resource Information
  | HTTP Method | Content Type |
  | :-- | :-- |
  | POST | application/json |
  
  #### Request Path Parameters
  | Parameter | Type | Required | Description |
  | :-- | :-- | :-- | :-- |
  | safeUrlId | string | yes | The URL encoding of the Safe name. For special characters, enter the encoding of the special character. For example, enter %20 to represent a space. |
  
  #### Request Query Parameters
  None
  
  ### Example Request Body
  ```
  {
    "memberName":"john.doe@example.com",
    "searchIn": "Vault",
    "membershipExpirationDate":1667472534, // Unix Time Stamp
    "permissions": {
      "useAccounts":false,
      "retrieveAccounts": false,
      "listAccounts": false,
      "addAccounts": false,
      "updateAccountContent": false,
      "updateAccountProperties": false,
      "initiateCPMAccountManagementOperations": false,
      "specifyNextAccountContent": false,
      "renameAccounts": false,
      "deleteAccounts": false,
      "unlockAccounts": false,
      "manageSafe": false,
      "manageSafeMembers": false,
      "backupSafe": false,
      "viewAuditLog": false,
      "viewSafeMembers": false,
      "accessWithoutConfirmation": false,
      "createFolders": false,
      "deleteFolders": false,
      "moveAccountsAndFolders": false,
      "requestsAuthorizationLevel1": false,
      "requestsAuthorizationLevel2": false
      },
    "MemberType": "user" // <user|group|role>
  }
  ```
  
  #### Example Response (201 Created)
  ```
  {
    "safeUrlId": "BRU-API-TEST-SAFE",
    "safeName": "BRU-API-TEST-SAFE",
    "safeNumber": 212,
    "memberId": "de17be2b-a17f-45c0-a22d-dd6fc50a9aae",
    "memberName": "bru.user@example.com",
    "memberType": "User",
    "membershipExpirationDate": 1667472534,
    "isExpiredMembershipEnable": true,
    "isPredefinedUser": false,
    "isReadOnly": false,
    "permissions": {
      "useAccounts": false,
      "retrieveAccounts": false,
      "listAccounts": false,
      "addAccounts": false,
      "updateAccountContent": false,
      "updateAccountProperties": false,
      "initiateCPMAccountManagementOperations": false,
      "specifyNextAccountContent": false,
      "renameAccounts": false,
      "deleteAccounts": false,
      "unlockAccounts": false,
      "manageSafe": false,
      "manageSafeMembers": false,
      "backupSafe": false,
      "viewAuditLog": false,
      "viewSafeMembers": false,
      "accessWithoutConfirmation": false,
      "createFolders": false,
      "deleteFolders": false,
      "moveAccountsAndFolders": false,
      "requestsAuthorizationLevel1": false,
      "requestsAuthorizationLevel2": false
    }
  }
  ```
  
  ### Response Codes
  | Return Code | Code Number | Description |
  | --- | --- | :-- |
  | Success | 200 | The request succeeded. The actual response will depend on the request method used. |
  | Created | 201 | The request was fulfilled and resulted in a new resource being created. |
  | Accepted | 202 | The request has been accepted for processing. |
  | No Content | 204 | The server successfully processed the request and is not returning any content (no response body). This code is typically returned by DELETE requests. |
  | Bad Request | 400 | The request could not be understood by the server due to incorrect syntax. |
  | Unauthorized | 401 | The request requires user authentication. |
  | Forbidden | 403 | The server received and understood the request, but will not fulfill it. Authorization will not help and the request MUST NOT be repeated. |
  | Not Found | 404 | The server did not find anything that matches the Request-URI. No indication is given of whether the condition is temporary or permanent. |
  | Conflict | 409 | The request could not be completed due to a conflict with the current state of the resource. |
  | Too Many Requests | 429 | The user has sent too many requests in a given amount of time ("rate limiting"). |
  | Internal Server Error | 500 | The server encountered an unexpected condition which prevented it from fulfilling the request. |
  | Not Implemented | 501 | The server does not support this operation due to version incompatibility. |
}
